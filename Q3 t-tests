% SUMMARY - MATLAB
% Reads an Excel workbook where each sheet corresponds to an anatomical region.
% Inputs:
%   - datafile: *my mass summary stat or composite summary stat table*
%   - Required columns in each sheet:
%       * metric (set by `metric`, e.g., 'Voxel count' or a SUVR/CBF/ATT column)
%       * groupVar (set by 'Amyloid Status', with 'Y' and 'N')
% Processing:
%   - For each sheet/region, extracts the chosen metric for amyloid-positive (Y)
%     and amyloid-negative (N) groups.
%   - Runs Welch’s t-test (unequal variances) comparing Y vs N.
%   - Computes group means and % difference relative to the negative group.
% Outputs:
%   - Table with columns: Anatomical_Region, Pos, Neg, Percent_Difference,
%     t_statistic, p_value, DoF.
%   - Saves results to 'Q1or3_*metric*.xlsx' *metric* i manually changed 

clear all;
close all;
clc;

% --- Paths ---
basedir  = 'D:\Yasmin_Liz\Needed';
datafile = fullfile(basedir, 'All_Subjects_ROI_Summary_Wholecereb.xlsx');

% --- Key column names (must exist within each sheet) ---
metric   = 'Voxel count';        % replace here with metric of interest ATT/CBF
groupVar = 'Amyloid Status';   % 'Y' for positive, 'N' for negative

% --- Get sheet names ---
if exist('sheetnames','file') == 2
    sheets = sheetnames(datafile);
else
    [~, sheets] = xlsfinfo(datafile);  % fallback for older MATLAB
end

% --- Prepare output table ---
results = table('Size',[0,7], ...
    'VariableTypes', {'string','double','double','double','double','double','double'}, ...
    'VariableNames', {'Anatomical_Region','Pos','Neg', ...
                      'Percent_Difference','t_statistic','p_value','DoF'});

% --- Loop sheets (each sheet = one region) ---
for i = 1:numel(sheets)
    regionName = sheets{i};

    % Read this sheet
    try
        T = readtable(datafile, 'Sheet', regionName, ...
                      'ReadVariableNames', true, 'VariableNamingRule','preserve');
    catch ME
        warning('Skipping sheet "%s": %s', regionName, ME.message);
        continue;
    end

    % Basic column checks
    if ~all(ismember({metric, groupVar}, T.Properties.VariableNames))
        warning('Sheet "%s" missing required columns. Skipping.', regionName);
        continue;
    end

    % Extract groups
    grp = string(T.(groupVar));
    suvr = T.(metric);

    suvr_pos = suvr(grp == "Y");
    suvr_neg = suvr(grp == "N");

    % Ensure enough data for Welch’s t-test
    if numel(suvr_pos) < 2 || numel(suvr_neg) < 2
        warning('Skipping "%s": insufficient data (need ≥2 per group).', regionName);
        continue;
    end

    % Welch’s t-test
    [~, p, ~, stats] = ttest2(suvr_pos, suvr_neg, 'Vartype','unequal');

    % % difference relative to negative group (omit NaNs)
    m_pos = mean(suvr_pos, 'omitnan');
    m_neg = mean(suvr_neg, 'omitnan');
    perc_diff = 100 * (m_pos - m_neg) / m_neg;

    % Append to results
    results = [results; {
        string(regionName), ...
        m_pos, ...
        m_neg, ...
        perc_diff, ...
        stats.tstat, ...
        p, ...
        stats.df
    }];
end

% --- Save ---
outpath = fullfile(basedir, 'Q3.xlsx');
writetable(results, outpath);

disp('Welch’s t-tests complete.');
disp(['Results saved to: ' outpath]);
